#!/usr/bin/env python
PACKAGE = "image_thresholding"

from dynamic_reconfigure.parameter_generator_catkin import *

# Generator to generate the parameters
gen = ParameterGenerator()

"""
The add function adds a parameter to the list of parameters. It takes a few different arguments:
	- name - a string which specifies the name under which this parameter should be stored
	- paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
	- level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are ORed together and the resulting value is passed to the callback.
	- description - string which describes the parameter
	- default - specifies the default value
	- min - specifies the min value (optional and does not apply to strings and bools)
	- max - specifies the max value (optional and does not apply to strings and bools)
"""
size_enum = gen.enum([ gen.const("Address", int_t, 0, "Use image address"),
                       gen.const("Camera",  int_t, 1, "Use camera to captue image")], "Values to select image")
gen.add("CaptureType", int_t, 0, "Capture type which is selected via an enum", 0, 0, 1, edit_method=size_enum)

gen.add("img_path",  str_t,    0, "Path to an image",  "./ironman.jpeg")
gen.add("Capture",   bool_t,   0, "Capture an image",  False)
"""
The last line simply tells the generator to generate the necessary files and exit the program. 
The second parameter is the name of a node this could run in (used to generate documentation only), 
the third parameter is a name prefix the generated files will get (e.g. "<name>Config.h" for c++, or "<name>Config.py" for python.

NOTE: The third parameter should be equal to the cfg file name, without extension. 
Otherwise the libraries will be generated in every build, forcing a recompilation of the nodes which use them.
"""
exit(gen.generate(PACKAGE, "image_thresholding", "import"))
